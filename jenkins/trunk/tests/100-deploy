#!/usr/bin/python3

import amulet
import json
import requests

###
# Quick Config
###
seconds = 900

###
# Deployment Setup
###
d = amulet.Deployment()

d.add('haproxy')  # website-relation
d.add('jenkins')  # Subject matter
d.add('jenkins-slave')  # Job Runner


d.relate('jenkins:website', 'haproxy:reverseproxy')
d.relate('jenkins:master', 'jenkins-slave:slave')

d.configure('jenkins', {'tools': 'git gcc make bzr vim-tiny',
                        'release': 'lts',
                        'username': 'amulet',
                        'password': 'testautomation',
                        'plugins': 'groovy',
                        'plugins-check-certificate': 'no'})

d.expose('jenkins')
d.expose('haproxy')

try:
    d.setup(timeout=seconds)
    d.sentry.wait()
except amulet.helpers.TimeoutError:
    amulet.raise_status(amulet.SKIP, msg="Environment wasn't stood up in time")
except:
    raise


###
# Define reconfiguration routine
###


###
# Define sentries for quick access
###
jenkins = d.sentry.unit['jenkins/0']
haproxy = d.sentry.unit['haproxy/0']
slave = d.sentry.unit['jenkins-slave/0']


###
# Validate Jenkins configuration options exercised
# Validate jenkins tool installation
###
def validate_tools():
    output, code = jenkins.run('dpkg -l vim-tiny')
    if not output:
        amulet.raise_status(amulet.FAIL, msg="No tool installation found")


def validate_release():
    list_present = jenkins.file_stat('/etc/apt/sources.list.d/jenkins.list')
    if not list_present:
        amulet.raise_status(amulet.FAIL, msg="No sources.list update")
    lc = jenkins.file_contents('/etc/apt/sources.list.d/jenkins.list')
    if not 'debian-stable' in lc:
        amulet.raise_status(amulet.FAIL, msg="LTS not found in sources.list")


def validate_login():
    #First off, validate that we have the jenkins user on the machine
    output, code = jenkins.run('id -u jenkins')
    if code:
        amulet.raise_status(amulet.FAIL, msg="Jenkins system user not found")
    #validate we have a running service of jenkins to execute the test against
    output, code = jenkins.run('service jenkins status')
    if code:
        amulet.raise_status(amulet.FAIL, msg="No Jenkins Service Running")
    payload = {'j_username': 'amulet',
               'j_password': 'testautomation',
               'from': '/'}
    jenkins_url = "http://%s:8080/j_acegi_security_check" % jenkins.info['public-address']
    r = requests.post(jenkins_url, data=payload)
    if r.status_code is not 200:
        amulet.raise_status(amulet.FAIL, msg="Failed to login")


#TODO: Figure out how to test installation of NonHTTPS plugin
# This is called as a flag to pyjenkins, and I dont know of any non https
# plugin repositories. Pinned here for reference later.
def validate_plugins():
    ds = jenkins.directory_stat('/var/lib/jenkins/plugins/groovy')
    if ds['size'] <= 0:
        amulet.raise_status(amulet.FAIL, msg="Failed to locate plugin")


def validate_website_relation():
    jenkins_url = "http://%s/" % haproxy.info['public-address']
    r = requests.get(jenkins_url)
    if r.status_code is not 200:
        amulet.raise_status(amulet.FAIL,
                            msg="Failed to reach jenkins through proxy")


def validate_slave_relation():
    jenkins_url = "http://%s:8080/computer/api/json" % jenkins.info['public-address']
    r = requests.get(jenkins_url)
    data = json.loads(r.text)
    if not data['computer'][1]['displayName'] == "jenkins-slave-0":
        amulet.raise_status(amulet.FAIL, msg="Failed to locate slave")

validate_tools()
validate_release()
validate_login()
validate_plugins()
validate_website_relation()
validate_slave_relation()
