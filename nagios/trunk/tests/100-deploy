#!/usr/bin/python3

#TODO - Discover what service mymonitors was designed for - as the charm store has nothing listed for this interface.
import amulet
import requests

###
# Quick Config
###
seconds = 900


d = amulet.Deployment()

d.add('haproxy')
d.add('nagios')
d.add('mysql')
d.add('nrpe')

#TODO - configure nagios with SSL options in branch
# lp:~lazypower/charms/precise/nagios/ssl-everywhere
# pending lp #1293793
d.configure('nagios', {'extraconfig': '#amulet'})
d.configure('haproxy', {})
d.configure('mysql', {})

d.relate('nagios:website', 'haproxy:reverseproxy')
d.relate('nagios:monitors', 'mysql:monitors')
d.relate('nrpe:general-info', 'haproxy:juju-info')
d.relate('nrpe:monitors', 'nagios:monitors')

d.expose('nagios')
d.expose('haproxy')

try:
    d.setup(timeout=seconds)
    #d.sentry.wait()
except amulet.helpers.TimeoutError:
    amulet.raise_status(amulet.SKIP, msg="Environment wasn't stood up in time")
except:
    raise


##
# Set relationship aliases
##
mysql_unit = d.sentry.unit['mysql/0']
nagios_unit = d.sentry.unit['nagios/0']
haproxy_unit = d.sentry.unit['haproxy/0']

# Fetch nagios private address through the relation data
sql_paddr = d.sentry.unit['nagios/0'].relation('monitors', 'mysql:monitors')['private-address']


# Mysql has a nice built in monitoring relationship with nagios
# Validate that we get the proper tables setup
def test_mysql_monitoring_connection():
    validation_sql = "select * from information_schema.user_privileges where grantee like \\\"'monitors'%\\\";"
    validation_command = "mysql -u root -p`cat /var/lib/mysql/mysql.passwd` -e \"%s\"" % validation_sql
    output, code = mysql_unit.run(validation_command)
    #We know that we need a GRANT USAGE permission for this to work properly
    if output.find("USAGE") == -1:
        amulet.raise_status(amulet.FAIL, msg="Missing GRANT on MySQL unit")


# We have an issue here. We cannot assign a sentry unit to a
# subordinate. This poses an interesting problem.
# validate that haproxy has an nrpe config, and *assume* its ok for now - needs
# some love otherwise.
def test_nrpe_monitor():
    #On join the NRPE unit generates an allowed hosts config
    ahosts = haproxy_unit.file_stat('/etc/nagios/nrpe.d/allowed.hosts.cfg')
    if not ahosts:
        amulet.raise_status(amulet.FAIL, msg="Missing nrpe config")
    running, code = haproxy_unit.run('service nagios-nrpe-server status')
    if running.find('running') == -1:
        amulet.raise_status(amulet.FAIL, msg="Failed to find running nrpe daemon")


#Validate that the web interface has htpasswd authentication
def test_web_interface_is_protected():
    r = requests.get("http://%s/nagios3/" % nagios_unit.info['public-address'])
    if r.status_code != 401:
        amulet.raise_status(amulet.FAIL, msg="Web Interface open to the world")
    #validate that our configured admin is valid
    nagpwd = nagios_unit.file_contents('/var/lib/juju/nagios.passwd').strip()
    r = requests.get("http://%s/nagios3/" % nagios_unit.info['public-address'],
                     auth=('nagiosadmin', nagpwd))
    if r.status_code != 200:
        amulet.raise_status(amulet.FAIL, msg="Web Admin login failed")


def text_extra_config_is_written():
    extracfg = nagios_unit.file_stat('/etc/nagios3/conf.d/extra.cfg')
    if not extracfg:
        amulet.raise_status(amulet.FAIL, msg="Extra Config missing")
    extracont = nagios_unit.file_contents('/etc/nagios3/conf.d/extra.cfg')
    if extracont.find('#amulet') == -1:
        amulet.raise_status(amulet.FAIL, msg="Missing extra config contents")

#TODO validate SQLite database entries for units


test_mysql_monitoring_connection()
test_nrpe_monitor()
test_web_interface_is_protected()
